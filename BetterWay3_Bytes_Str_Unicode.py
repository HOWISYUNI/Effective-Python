    import sys

# 20쪽 
# bytes, str, unicode의 차이점을 알자.
# 16년 9월 10일 완성.

"""
인코딩은 빌어먹을 만큼 중요하다. 난 그렇게 생각한다.
생각해보자. 내가 웹 앱을 운영하는데 수많은 운영체제을 통한 서로 다른 인코딩 문자의 입력과 마주할 수 있다.
난 CP949로 일을 처리할 수 있는데 클라이언트가 UTF-8로 입력을 보내면 어떻게 대처해야 할까?

아마도,
상대방의 utf-8을 바이츠로 변환하고 그 바이츠를 cp949로 다시 인코딩해야 할 것이다.
    # 즉 먼저 상대방의 입력을 바이너리로 인코딩하고, 그 결과를 CP949로 디코딩해야 할 것이다. # <-- 중요

3장은 인코딩 관련한 장이고 파이썬 인코딩에 대한 기초적인 지식만 적어본다.
심화는 나중에 더 해봅시다!
"""


"""
파이썬에서 문자 시퀀스를 나타내는 방식은 유니코드 문자열 방식과 바이츠(raw 8bit) 형식 2가지다.
파이썬 3는 문자는 str, 바이츠는 bytes 클래스로 표현하고
파이썬 2는 문자는 unicode, 바이츠는 str 클래스로 표현한다. 헷갈리지 말아야 한다.
파이썬 2, 3간 연관된 바이너리 인코딩이 없어서 둘을 섞어 쓸때는 신중해야 한다.
일단 파이썬 3 기준으로 한다.
"""

"""
bytes 인스턴스에 대해 간단히 소개한다.
str 문자열을 생성하는 방법은 " ㅁㄴㅇㄻㄴㅇㄹ"와 같이 따옴표 안에 문자나 숫자를 적는 것이다.
반대로 bytes는 b'\x41'과 같이 문자열 앞에 b를 붙여야 한다.         # 문자열 앞에 붙는 'r'과 'u'도 알아보자.
아까 bytes는 8비츠로 이루어진다고 했다. 유의미한 바이츠 인스턴스는 ascii 상수로만 이루어진다.
저 위의 b'\x41'가 보이는가? 41은 16진수의 수이고 10진수로 65다.
그리고 '\x'가 저 숫자가 16진수임을 보증한다. 저걸 디코드하면 'A'가 나올 것이다.
그러니까 4비트 4비트 붙어서 글자가 되고 8비트가 되는 것. # 참고로 4비트는 nibble이라고 한다.

나중에 파이썬 인코딩을 더 다루게 되면 자세히 소개한다.
"""


"""
유니코드 str과 바이너리 bytes를 호환하려면 다음과 같은 방식을 거쳐야 한다.
str --> bytes는 str의 encode 메소드를 통해야 한다.
bytes --> str은 bytes의 decode 메소드를 통해야 한다.
    # 이때 기본 인코딩은 파이썬 기본 인코딩인 utf-8를 통해서 진행되며 encoding 키워드 아규먼트를 통해 수정가능.
    example 1. 'a'.encode(encoding='CP949')
            2. b'\x45'.decode()

"""




"""
경험담을 하나 풀자면,
본인은 윈도우를 사용하며 인코딩을 공부하기 위해 바탕화면에 txt 파일을 놓고
쓰고 지우고를 많이 반복했다.

fp = open('example.txt', 'r', encoding='utf-8').read()
의 결과가 무엇이 나왔을까?

UnicodeDecodeError가 발생했다. 윈도우는 기본적으로 CP949 인코딩을 사용한다.
그런데 그것을 utf-8 인코딩을 사용해 열었으니 안 열리는 것이다.
위와 같은 일을 막기 위해서는 인코딩을 알아야 한다.
사실 3장은 위의 내용이 아니다.
내가 처음에 3장을 보고 충격을 먹었는데 왜냐하면 bytes의 존재 자체를 몰랐기에
그들의 차이점을 알자는 말에 벙찔 수밖에 없었다.
그래서 나와 같은 사람들을 위해서 bytes에 대해 먼저 소개하는 내용을 적었다.
두서 없이 급하게 적었는데 help(bytes)를 정독해보고, 질문이 생기면 연락하자.
"""




# 생각해볼 문제.
# 1. codecs module에 대해 알아보자.
# 2. '가'를 utf-8로 인코딩해보자. 아마 'A'의 b'\x41' 보다 훨씬 길텐데 왜 그럴지 알아보자.
